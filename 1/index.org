基本概念

* 前文
- 関数プログラミング
  - 定義を構築し、式を評価する
- プログラマの役割
  - 問題を解くための関数を構成
  - + DSLの作成とも言えそう
- 計算機は電卓とも言える
  - 関数型の電卓の計算能力はプログラマの腕しだい
- 定義した関数
  - 印字可能な形式への変換規則
* 1.1 セッションとスクリプト
- セッション
  - 式を入力すると評価結果が変える
  - このような流れの利用者と計算機の対話をセッション
- スクリプト
  - 定義を並べたもの
  - 定義を構築することが知的作業
- 型シグネチャ
  - 定義の一部
  - 関数についてる情報
- 定義の目的
  - 束縛
    - 与えられた式に名前をつける
  - 環境 文脈
    - 束縛の集り
  - 式は ある文脈によって評価される
  - + 式の中で使える名前は 文脈によって決定する
- プログラマが文脈を与えなくても評価できる式がある
  - プレリュード
    - 特別扱いのスクリプトでよく使う演算を定義済み
    - セッション開始時によみこまれる
** 練習問題
- [[file:1.1.hs]]
** 個人的まとめ
[[http://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-1/][blog記事]]
* 1.2 評価
- 評価
  - 式をもっとも単純で等価な形式に簡約
  - 結果を求める
  - 評価、簡約、単純化は区別なく使用する
- 標準形, 正規形
  - これ以上簡約できない
- 簡約系列
  - ? 簡約の手順書
  - 複数存在する
  - 関数プログラミングではどの手順でも最終結果が一致する
  - ただし、停止する場合に限る
  - 手順によっては停止する場合としない場合がある
  - 遅延評価という簡約戦略を使用する -> 7章
** 練習問題
- [[file:1.2.md]]
** 個人的まとめ
[[http://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-2/][blog記事]]
* 1.3 値
- 式を用いて表現する
  - 式もそのためだけに使用する
- 数値、論理値、文字、タプル、関数、リスト がある
- 新しい値も導入できる
- 式の最も単純な形式は 値 ではない。
  - 値を表現するものの ひとつにすぎない
  - 評価機は値を表示する際 標準表現 を用いる
    - 標準表現が存在しない値もある
      - 例 関数
    - 有限な表現がない場合がある
      - 例 円周率
- 簡約が停止しない式は 値とは言えない
  - 例 1/0
  - このような場合には bottom という未定義値を導入するとよい
  - 1/0 = bottom
  - 評価機が bottom を評価した場合は評価機依存
- 正格関数
  - f bottom = bottom となる関数
  - bottom が評価されるので エラーになったり無限に簡約されたり
- 非正格関数
  - f bottom /= bottom となる関数
  - bottom が評価されないのでエラーになったりしない
  - 例 three x = 3
  - 遅延評価でなければ定義できない
** 練習問題
- [[file:1.3.md]]
** 個人的まとめ
